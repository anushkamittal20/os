package:
  name: bats
  version: 1.11.0
  epoch: 2
  description: Bash Automated Testing System
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - bash
      - busybox
      - ncurses
      - parallel

environment:
  contents:
    packages:
      - bash
      - wget

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/bats-core/bats-core
      tag: v${{package.version}}
      expected-commit: 5da66876b8b619235aee1eb3e54954eaca88059b

  - runs: |
      ./install.sh "${{targets.contextdir}}/usr"
      mkdir -p "${{targets.contextdir}}/tmp/"
      cp -r ./docker "${{targets.contextdir}}/tmp/docker"
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" support 0.3.0
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" file 0.4.0
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" assert 2.1.0
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" detik 1.3.1
      find "${{targets.contextdir}}" -type f -perm /2000 -exec chmod g-s {} \;
      rm -rf "${{targets.contextdir}}/tmp/"

subpackages:
  - name: bats-compat
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}/opt/bats/"
          find . -maxdepth 1 -not -name '.' -not -name 'melange-out' -not -name '*.tmp' -not -name '*.log' \
            -exec mv {} "${{targets.contextdir}}/opt/bats/" \;
          mkdir -p "${{targets.contextdir}}/usr/local/bin"
          ln -s /opt/bats/bin/bats "${{targets.contextdir}}/usr/local/bin/bats"
    description: bats compatibility package

  - name: bats-doc
    pipeline:
      - uses: split/manpages
    description: bats manpages

update:
  enabled: true
  github:
    identifier: bats-core/bats-core
    strip-prefix: v

test:
  pipeline:
    - runs: |
        bats --version

        echo 'add_numbers() {' > /tmp/example.sh
        echo '  echo $(( $1 + $2 ))' >> /tmp/example.sh
        echo '}' >> /tmp/example.sh
        echo '' >> /tmp/example.sh
        echo 'file_exists() {' >> /tmp/example.sh
        echo '  if [[ -f "$1" ]]; then' >> /tmp/example.sh
        echo '    echo "true"' >> /tmp/example.sh
        echo '  else' >> /tmp/example.sh
        echo '    echo "false"' >> /tmp/example.sh
        echo '  fi' >> /tmp/example.sh
        echo '}' >> /tmp/example.sh
        echo '' >> /tmp/example.sh
        echo 'string_contains() {' >> /tmp/example.sh
        echo '  if [[ "$1" == *"$2"* ]]; then' >> /tmp/example.sh
        echo '    echo "true"' >> /tmp/example.sh
        echo '  else' >> /tmp/example.sh
        echo '    echo "false"' >> /tmp/example.sh
        echo '  fi' >> /tmp/example.sh
        echo '}' >> /tmp/example.sh

        # Write the bats test script
        echo '#!/usr/bin/env bats' > /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo 'load_file() {' >> /tmp/inline_test.bats
        echo '  source "/tmp/example.sh"' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo 'setup() {' >> /tmp/inline_test.bats
        echo '  load_file' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo 'teardown() {' >> /tmp/inline_test.bats
        echo '  rm -f testfile.txt' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo '@test "add_numbers should correctly add two numbers" {' >> /tmp/inline_test.bats
        echo '  run add_numbers 3 5' >> /tmp/inline_test.bats
        echo '  [ "$status" -eq 0 ]' >> /tmp/inline_test.bats
        echo '  [ "$output" -eq 8 ]' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo '@test "file_exists should return true for existing file" {' >> /tmp/inline_test.bats
        echo '  touch testfile.txt' >> /tmp/inline_test.bats
        echo '  run file_exists testfile.txt' >> /tmp/inline_test.bats
        echo '  [ "$status" -eq 0 ]' >> /tmp/inline_test.bats
        echo '  [ "$output" = "true" ]' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo '@test "file_exists should return false for non-existing file" {' >> /tmp/inline_test.bats
        echo '  run file_exists non_existing_file.txt' >> /tmp/inline_test.bats
        echo '  [ "$status" -eq 0 ]' >> /tmp/inline_test.bats
        echo '  [ "$output" = "false" ]' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo '@test "string_contains should return true if substring is found" {' >> /tmp/inline_test.bats
        echo '  run string_contains "hello world" "hello"' >> /tmp/inline_test.bats
        echo '  [ "$status" -eq 0 ]' >> /tmp/inline_test.bats
        echo '  [ "$output" = "true" ]' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats
        echo '' >> /tmp/inline_test.bats
        echo '@test "string_contains should return false if substring is not found" {' >> /tmp/inline_test.bats
        echo '  run string_contains "hello world" "bye"' >> /tmp/inline_test.bats
        echo '  [ "$status" -eq 0 ]' >> /tmp/inline_test.bats
        echo '  [ "$output" = "false" ]' >> /tmp/inline_test.bats
        echo '}' >> /tmp/inline_test.bats

        # Make the scripts executable
        chmod +x /tmp/example.sh
        chmod +x /tmp/inline_test.bats

        # Run the bats tests
        bats /tmp/inline_test.bats

        # Clean up
        rm -f /tmp/example.sh
        rm -f /tmp/inline_test.bats
